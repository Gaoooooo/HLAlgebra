class SimpleRegression {

  constructor() { }
  
  //pass 2xn matrix, first row observed second row dependent 
  fit(a: mat) : SimpleRegression {
    //covxy = ssxy = sum(xy) - (1/n)(sum x)(sum y)
    //varxy = ssxx = sum (x^2)  - (1/n)(sumx)^2 
    let sum_x = mathjs.sum(a.row(0).toArray());
    let sum_y = mathjs.sum(a.val[1]);
    
    let sum_xy = 0;
    for (let i = 0; i < a.cols - 1; i++) {
      sum_xy += ( ( a.row(0).val[0][i] ) * ( a.row(1).val[1][i] ) )
    }
    let n = a.cols;
    
    let cov_xy = sum_xy - (  (1/n)*(sum_x)*(sum_y) );
    
    let sum_xx = mathjs.sum(a.val[0]*a.val[0])
    
  }


}

    w: mat;

    constructor() { }

    //x: M-by-N matrix. M data with N dimensions. Each row is an N-dim vector
    //y: M-by-1 matrix
    fit(x_: mat, y_: mat) : LinearRegression{

        var y = y_;
        //check the dimension of y
        if (y_.rows != 1 && y_.cols == 1) {
            y = y_.T();
        }


        //expan x_ with one more column with 1
        var x = x_.resize(x_.rows, x_.cols + 1, 1);

        //calculate w = (X.T() * X)^-1 * X.T() * y

        //(X.T() * X)
        var xT_mul_x = mul(x.T(), x).log();

        //(X.T() * X)^-1 
        var xT_mul_x_inverse = inverse(xT_mul_x).log();

        //(X.T() * X)^-1 * X.T()
        var s3 = xT_mul_x_inverse.mul(x.T());

        //w = (X.T() * X)^-1 * X.T() * y
        this.w = s3.mul(y.T());

        return this;
    }

    //x: M-by-N matrix. M data with N dimensions. Each row is an N-dim vector
    //
    predict(x_: mat):mat {

        //expan x_ with one more column with 1
        var x = x_.resize(x_.rows, x_.cols + 1, 1);
        return x.mul(this.w);
    }


}
